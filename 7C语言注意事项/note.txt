基础细节列表主要讲了const,volatile,typedef,static等关键字的用法，还用自增++i和i++的区别，还有合理的使用goto和return语句
定义结构体的规则，首先，结构的成员变量的类型是没有任何限制的；其次.和->都是用来引用结构变量的成员，但是它们的应用环境是不一样的；.是用在一般的结构体变量，而->则是表示指向结构体变量指针的成员。
枚举类型是C语言的一种高级类型，枚举类型可以用来定义常量数值。
一般情况将以下内容放到.h文件中；1,宏定义；2，结构，联合和枚举类型；3，typedef声明;4, 外部函数声明; 5, 全局变量声明.
C语言的预处理功能：所谓的预处理就是在进行编译的第一遍扫描之前所做的工作，包含以下几个功能：1， 宏定义，包含无参数宏定义和有参数宏定义。 2，文件包含，指一个源文件可以把另一源文件给包含进来。3，条件编译，对源程序中的程序段进行有条件的编译。 C语言的预处理命令和一般的程序语句不一样，是用#开头，单独占一行，不用分号结尾，并且放在程序的开始处。
malloc()和calloc()均包含在stdlib.h的头文件中
malloc和calloc函数的区别
参数上的区别：
malloc(size_t size);
calloc(size_t n,size_t size);
malloc分配一块size大小的内存块，而calloc分配一个n*size大小的内存块。
返回内存的状态不同，malloc分配的内存块没有被清零，而calloc分配的内存块是清零的。
释放内存空间的函数是free().
 数组的下标是从0开始。在编写函数是可以用数组名做参数，这种方法其实是通过数组的首地址传递整个数组；在c语言中，使用字符数组保存字符串，也就是一个一维数组保存字符串中每一个字符。此时系统自动为其添加'\0'作为结束符。
 由于C语言允许讲一个较大的程序分为若干个独立模块分别编译，如果一个源文件中的函数想使用其它源文件中的变量，就可以用extern来声明外部变量。这就是说extern变量可以扩展外部变量的作用域。在函数内的extern变量说明，表示引用其它文件的外部变量。
 数组元素做实参时，只用数值类型与函数的形参是一致的，那么作为下标变量的数组元素的类型也和函数行形参变量的类型是一致的。数组名就是数组的首地址，因此在数组名作为函数的参数是，所进行的传送只是地址的传送，即把实参数组的首地址赋给形参数组名。
  用数组名最为函数的参数时还需要注意以下几点：
1，形参数组和实参数组类型必须一致，否则将引起错误。
2，形参数组和实参数组的长度可以不同，在参数传递是，只传递首地址而不检查形参数组的长度。
3， 在函数形参表中，允许不给形参数组的长度或用一个变量来表示数组元素的个数。
4，多维数组也可以作为函数的参数，在函数定义是对形参数组可以指定数组的长度，也可以省去一维的长度。
  全局变量通常是所说的外部变量，在之前加上static后就是静态变量。其二者的存储均为静态存储方式，但是其作用域不同。非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，非静态的全局变量在各个源程序中都是有效的。而静态全局变量只在定义这个变量的源文件里面是有效的，在同一源程序的其他源文件里面不能够使用。通常变量是储存在内存中，当对一个变量频繁读写是，C语言中体用了寄存器变量，寄存器变量的说明符是register.
   空指针可以确保不指向任何地方，而为初始化的指针则可能指向任何地方。
   空指针一般应用于以下的情况：
   1，用空指针终结对递归数组结构的间接引用。
   2， 用空指针作为函数调用失败时的返回值。
   3，用空指针作为警戒值。

   在C语言中就算表达式的布尔值时，如果表达式等于0则为假，否则为真。

   express代表计算表达式，if(express)与if((express)!=0)等价.
   如果用指针p代替express, 则if(p)与if(p!=0)等价。if(!p)与if(p==0)等价。所以说类似于if(p)这样的写法是完全合法的。
   &a是数组指针，而指针加1要根据指针类型加上一定的值，不同类型的制作+1后增加的大小不一样，a是长度为5的int数组指针，所以要加5*sizeof（int），如果是长度为10的int数组指针，则要加上10*sizeof（of），而ptr则是一个int型的指针变量，所以如果加1减1，变化的只是一个int的大小，这有别于数组指针。
  a和&a的地址是一样的，但是意思不一样，a是数组首地址，也就是a[0]的地址，&a是对象的首地址，这里的对象是a这个数组，a+1是数组下一个元素的地址，即a[1].&a+1是下一个对象的地址，即a[5].
  使用*可以指向变量的地址，使用&可以获取变量的地址,可以*和&是互为逆运算的。
  假设p为一个指针变量，则可知：
  p 表示指针变量。
  *p 表示指针指向的变量；
  &p 表示指针变量的地址。
  &(*p) 表示变量(*p)的地址，即p.
  *(&p) 便是指针(&p)所指向的变量，即p.

  数组长度不能够使用变量，应该使用常量。
